[s2021103016@centos8-linux Mon Nov 06 06:59 PM labExam]$ cat udpserver.py
import socket

# Define the server IP address and port
server_ip = '127.0.0.1'
server_port = 3016

# Create a UDP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind the socket to the server address
server_socket.bind((server_ip, server_port))

print(f"UDP server listening on {server_ip}:{server_port}")

while True:
    # Receive data from the client
    data, client_address = server_socket.recvfrom(1024)
    print(f"Received data from {client_address}: {data.decode()}")
    if (data.decode() == "exit"):
        print("Connection with client closed")
    # You can process the data here as needed
    response = "OK"
    server_socket.sendto(response.encode('utf-8'), client_address)

# Close the server socket (unreachable in this example)
server_socket.close()
[s2021103016@centos8-linux Mon Nov 06 06:59 PM labExam]$ cat udpclient.py
import socket

# Define the server IP address and port
'''server_ip = '127.0.0.1'
server_port = 3016
'''
server_address = ('127.0.0.1', 3016)
# Create a UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

while True:
    message = input("Enter a message: ")

    # Send the message to the server
    client_socket.sendto(message.encode(), server_address)
    if (message == "exit"):
        print("Client connection closed!")
        break
    response, server_address = client_socket.recvfrom(1024)
    print(f"Server: {response.decode('utf-8')}")

# Close the client socket (unreachable in this example)
client_socket.close()

[s2021103016@centos8-linux Mon Nov 06 06:59 PM labExam]$

--------------------------------------------------------------------------------------------
TCP
[s2021103016@centos8-linux Mon Nov 06 07:22 PM labExam]$ cat fileServer.py
import socket

# Define the server IP address and port
server_ip = '127.0.0.1'
server_port = 3016

# Create a TCP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the server address
server_socket.bind((server_ip, server_port))

# Listen for incoming connections
server_socket.listen(1)

print(f"TCP server listening on {server_ip}:{server_port}")

while True:
    # Accept a connection from a client
    client_socket, client_address = server_socket.accept()
    print(f"Accepted connection from {client_address}")

    # Receive the file name
#    file_name = client_socket.recv(1024).decode()
    file_name = "newFile.txt"
    print(f"Receiving file: {file_name}")

    # Open the file for writing
    with open(file_name, 'wb') as file:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            file.write(data)
            break

    print(f"File {file_name} received successfully")

    # Send an acknowledgment to the client
    client_socket.send("File received".encode())

    # Close the client socket
    client_socket.close()

# Close the server socket (unreachable in this example)
server_socket.close()

[s2021103016@centos8-linux Mon Nov 06 07:23 PM labExam]$ cat fileClient.py
import socket
HOST = '127.0.0.1'
PORT = 3016
FORMAT = 'utf-8'
SIZE = 1024
def main():
    client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    client.connect((HOST,PORT))

    #opening and reading file data
    file = open("sample.txt", "r")
    data = file.read()

    #sending the filename to the server
    #client.send("sample.txt".encode(FORMAT))
    client.send(data.encode(FORMAT))
    msg = client.recv(SIZE).decode(FORMAT)
    print(f"Server: {msg}")

    #Closing the file
    file.close()

    client.close()
if _name_ == "_main_":
    main()
[s2021103016@centos8-linux Mon Nov 06 07:23 PM labExam]$

------------------------------------------------------------------------------------------------
Per HTTP

[s2021103016@centos8-linux Mon Nov 06 07:45 PM labExam]$ cat httpserver.py
import http.server
import socketserver

# Define the port on which you want to run the server
PORT = 3016

# Create a SimpleHTTPRequestHandler
handler = http.server.SimpleHTTPRequestHandler

# Create a server instance
with socketserver.TCPServer(("", PORT), handler) as httpd:
    print(f"Serving at port {PORT}")
    httpd.serve_forever()

[s2021103016@centos8-linux Mon Nov 06 07:45 PM labExam]$ cat PersistentClient.py 
import http.client
import sys

print('input file name (ex. test.html): ', end='')
file_name = input()
print("Connection established")
conn = http.client.HTTPConnection("localhost",3016)
while file_name.lower() != 'exit':
    conn.request("GET", "/" + file_name)

    resp = conn.getresponse()
    print(resp.status, resp.reason)

    data = resp.read()
    print(data.decode())


    print('input file name (ex. test.html): ', end='')
    file_name = input()
conn.close()
print('Connection terminated and Exiting...')
[s2021103016@centos8-linux Mon Nov 06 07:46 PM labExam]$
------------------------------------------------------------------------------------------
Np http
[s2021103016@centos8-linux Mon Nov 06 08:05 PM labExam]$ cat NonPersistentClient.py 
import http.client

# Set the server address and port
server_address = "localhost"  # Change this to the address of your server
port = 3016

# Create an HTTP connection
conn = http.client.HTTPConnection(server_address, port)

# Define the path you want to request
path = "/"

# Send an HTTP GET request
conn.request("GET", path)
response = conn.getresponse()

# Print the response status code and content
print("Response Status:", response.status)
print("Response Content:")
print(response.read().decode())

# Close the connection
conn.close()
----------------------------------------------------------------------------------------
mutli udp
[s2021103016@centos8-linux Mon Nov 06 08:57 PM labExam]$ cat MultiServer.py 
import socket
import threading

HOST = '127.0.0.1'
PORT = 3016

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((HOST, PORT))

print('Server listening on port', PORT)

def handle_client(data, addr):
  a,op,b = data.decode().split()

  if a == "stop" or b == "stop":
    print(f'Client {addr} disconnected')
    return

  a = int(a)
  b = int(b)
  result=0
  if op == '+':
    result = a + b
  elif op == '-':
    result = a - b
  elif op == '*':
      result = a * b
  elif op == '/':
      if b != 0:
          result = a / b
      else:
          result = -2348238

  sock.sendto(str(result).encode(), addr)

while True:

  data, addr = sock.recvfrom(1024)

  thread = threading.Thread(target=handle_client, args=(data, addr))
  thread.start()
[s2021103016@centos8-linux Mon Nov 06 08:57 PM labExam]$ cat MultiClient.py 
import socket

HOST = '127.0.0.1'
PORT = 3016

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

while True:
  input_str = input('Enter operation (a op b) or "stop" to quit: ')

  if input_str == 'stop':
    break

  sock.sendto(input_str.encode(), (HOST, PORT))

  result, stuff = sock.recvfrom(1024)
  print('Result:', result.decode())

sock.close()
[s2021103016@centos8-linux Mon Nov 06 08:57 PM labExam]$
-----------------------------------------------------------------------------------
stnw
import random
import time

# Simulated network delay
def simulate_network_delay():
    return random.randint(1, 3)

# Sender function
def sender(frame):
    print(f"Sender: Sending frame {frame}")
    time.sleep(simulate_network_delay())  # Simulate network delay
    return frame

                # Receiver function
def receiver(expected_frame,frames_to_send):
    time.sleep(simulate_network_delay())  # Simulate network delay
    received_frame = expected_frame if random.random() < 0.9 else None  # Simulate packet loss
    if received_frame is not None:
        print(f"Receiver: Received frame {received_frame}")
    else:
        print(f"Receiver: Frame {expected_frame} not received")
    #print(f"Receiver : Received frame {frames_to_send}")
    return received_frame

                                                            # Main simulation loop
def main():
    frames_to_send = 5
    frame_expected = 0
    sender(0)
    while frame_expected < frames_to_send:

        ack_received = receiver(frame_expected,frames_to_send)
        if ack_received == frame_expected:
            frame_expected += 1
            sender(frame_expected)
        else:
            print("Sender: Timeout, resending frame", frame_expected)
    print(f"Receiver: Received frame {frames_to_send}")
if _name_ == "_main_":
    main()
------------------------------------------------------------------------------------------
go back
import random
import time
random.seed(9821)
WINDOW_SIZE = 3  # Window size for the sender and receiver
MAX_FRAMES = 10  # Total number of frames to be sent

# Simulated network delay
def simulate_network_delay():
    return random.randint(1, 3)

# Sender function
def sender(frames):
    base = 0
    next_seq_num = 0
    buffer = frames[0:WINDOW_SIZE]

    while base < len(frames):
        for i in range(base, min(base + WINDOW_SIZE, len(frames))):
            print(f"Sender: Sending frame {frames[i]}")
            time.sleep(simulate_network_delay())  # Simulate network delay


        temp = buffer
        for i in range(base, min(base + WINDOW_SIZE, len(frames))):
            ack_received = receiver(base, buffer)

            if ack_received == base:
                base += 1
                buffer.pop(0)
                if next_seq_num < len(frames):
                    buffer.append(frames[next_seq_num])
                    next_seq_num += 1
            else:
                buffer = temp
                print(f"Sender: Timeout, resending frames [{base}:{base+WINDOW_SIZE-1}]")
                break

# Receiver function
def receiver(expected_seq_num, buffer):
    time.sleep(simulate_network_delay())  # Simulate network delay
    received_frame = expected_seq_num if random.random() < 0.75 else None  # Simulate packet loss

    if received_frame is not None:
        print(f"Receiver: Received frame {received_frame}")
        if received_frame == expected_seq_num:
            return received_frame

    return None

def main():
    frames_to_send = list(range(MAX_FRAMES))
    sender(frames_to_send)

if _name_ == "_main_":
    main()
